import React from "react";
import { 
  Paper, 
  Typography, 
  Box, 
  IconButton, 
  Tooltip, 
  Divider,
  Chip,
  Stack,
  Alert,
  Collapse,
  useTheme,
  Button
} from "@mui/material";
import { Light as SyntaxHighlighter } from "react-syntax-highlighter";
import js from "react-syntax-highlighter/dist/esm/languages/hljs/javascript";
import { docco } from "react-syntax-highlighter/dist/esm/styles/hljs";
import AnimatedButton from "../components/AnimatedButton";
import API from "../api/api";
import { useNavigate } from "react-router-dom";
import { 
  ContentCopy, 
  Download, 
  Expand,
  Code as CodeIcon,
  GitHub as GitHubIcon,
  CheckCircle as CheckCircleIcon,
  Error as ErrorIcon,
  ArrowBack
} from "@mui/icons-material";

SyntaxHighlighter.registerLanguage("javascript", js);

export default function CodePreview() {
  const theme = useTheme();
  const navigate = useNavigate();
  
  // Safely parse and handle the generated data
  const generatedRaw = JSON.parse(sessionStorage.getItem("tcg_generated") || {});
 let filesToCreate = [];
  try {
    const parsed = JSON.parse(generatedRaw);
    // If parsed is an array of objects (old format)
    if (Array.isArray(parsed)) {
      filesToCreate = parsed;
    } 
    // If parsed is an object with path/code (old format single file)
    else if (parsed && parsed.path && parsed.code) {
      filesToCreate = [parsed];
    } 
    // If parsed is just a string inside JSON (unlikely but safe check)
    else if (typeof parsed === "string") {
      filesToCreate = [{ path: "test.spec.js", code: parsed }];
    }
  } catch {
    // New format: raw string from AI
    filesToCreate = [{ path: "test.spec.js", code: generatedRaw }];
  }

  const [expandedFile, setExpandedFile] = React.useState(0);
  const [prStatus, setPrStatus] = React.useState({ loading: false, success: null, error: null });

  const cleanCode = (code) => {
    if (!code) {
      return '// No test code was generated\n// Please try generating again';
    }
    
    if (typeof code !== 'string') {
      try {
        code = JSON.stringify(code, null, 2);
      } catch {
        return '// Invalid test code format\n// Raw data: ' + String(code);
      }
    }
    
    // Clean common AI response artifacts
    return code
      .replace(/```(javascript|js)?/g, '')
      .replace(/```/g, '')
      .replace(/^['"`]+|['"`]+$/g, '')  // Remove surrounding quotes if present
      .trim();
  };

  const createPr = async () => {
    try {
      setPrStatus({ loading: true, success: null, error: null });
      const resp = await API.post("/api/github/create-pr", {
        owner: generated.owner || "owner",
        repo: generated.repo || "repo",
        baseBranch: generated.baseBranch || "main",
        branchName: `tcg/generated-${Date.now()}`,
        files: filesToCreate,
        title: "Add generated tests",
        body: "Generated by TestCase Generator"
      });
      setPrStatus({ loading: false, success: `PR created: ${resp.data.html_url}`, error: null });
    } catch (err) {
      setPrStatus({ 
        loading: false, 
        success: null, 
        error: "Error creating PR: " + (err?.response?.data?.message || err.message) 
      });
    }
  };

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
  };

  const downloadFile = (file) => {
    const blob = new Blob([file.code], { type: 'text/javascript' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = file.path.split('/').pop() || 'test.spec.js';
    link.click();
  };

  if (filesToCreate.length === 0) {
    return (
      <Paper sx={{ 
        p: 4, 
        textAlign: 'center',
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        gap: 3,
        borderRadius: 4
      }}>
        <CodeIcon color="disabled" sx={{ fontSize: 60 }} />
        <Typography variant="h5">No test files generated</Typography>
        <Typography variant="body1" color="text.secondary" sx={{ maxWidth: '60%' }}>
          The test generation process didn't produce any valid test files.
        </Typography>
        <Button 
          onClick={() => navigate(-1)} 
          variant="contained"
          sx={{ mt: 2 }}
          startIcon={<ArrowBack />}
        >
          Back to Generator
        </Button>
      </Paper>
    );
  }

  return (
    <Paper sx={{
      p: 4,
      height: '100%',
      display: 'flex',
      flexDirection: 'column',
      gap: 3,
      borderRadius: 4,
      backgroundColor: 'background.paper',
      boxShadow: theme.shadows[2]
    }}>
      <Stack direction="row" alignItems="center" spacing={2}>
        <CodeIcon color="primary" sx={{ fontSize: 32 }} />
        <Box>
          <Typography variant="h4" fontWeight={600}>
            Generated Test Suite
          </Typography>
          <Typography variant="body1" color="text.secondary">
            Review and deploy your AI-generated tests
          </Typography>
        </Box>
        <Chip 
          label={`${filesToCreate.length} test file${filesToCreate.length !== 1 ? 's' : ''}`} 
          color="primary"
          size="small"
          sx={{ ml: 'auto' }}
        />
      </Stack>

      <Collapse in={!!prStatus.error}>
        <Alert 
          severity="error" 
          icon={<ErrorIcon />}
          onClose={() => setPrStatus({...prStatus, error: null})}
          sx={{ mb: 2 }}
        >
          {prStatus.error}
        </Alert>
      </Collapse>

      <Collapse in={!!prStatus.success}>
        <Alert 
          severity="success" 
          icon={<CheckCircleIcon />}
          onClose={() => setPrStatus({...prStatus, success: null})}
          sx={{ mb: 2 }}
        >
          {prStatus.success}
        </Alert>
      </Collapse>

      <Box sx={{ 
        flex: 1, 
        overflow: 'hidden',
        display: 'flex',
        flexDirection: 'column',
        gap: 3
      }}>
        {filesToCreate.map((file, idx) => (
          <Paper
            key={idx}
            elevation={0}
            sx={{
              flex: expandedFile === idx ? 1 : 'none',
              display: 'flex',
              flexDirection: 'column',
              border: '1px solid',
              borderColor: 'divider',
              borderRadius: 3,
              overflow: 'hidden',
              backgroundColor: 'background.default'
            }}
          >
            <Stack 
              direction="row" 
              alignItems="center" 
              spacing={1}
              sx={{
                px: 3,
                py: 2,
                backgroundColor: 'primary.light',
                color: 'primary.contrastText'
              }}
            >
              <GitHubIcon fontSize="small" />
              <Typography variant="subtitle2" sx={{ fontFamily: 'monospace', flex: 1 }}>
                {file.path}
              </Typography>
              <Stack direction="row" spacing={1}>
                <Tooltip title="Copy code">
                  <IconButton 
                    size="small" 
                    onClick={() => copyToClipboard(file.code)}
                    sx={{ color: 'primary.contrastText' }}
                  >
                    <ContentCopy fontSize="small" />
                  </IconButton>
                </Tooltip>
                <Tooltip title="Download file">
                  <IconButton 
                    size="small" 
                    onClick={() => downloadFile(file)}
                    sx={{ color: 'primary.contrastText' }}
                  >
                    <Download fontSize="small" />
                  </IconButton>
                </Tooltip>
                <Tooltip title={expandedFile === idx ? "Collapse" : "Expand"}>
                  <IconButton
                    size="small"
                    onClick={() => setExpandedFile(expandedFile === idx ? null : idx)}
                    sx={{ color: 'primary.contrastText' }}
                  >
                    <Expand fontSize="small" />
                  </IconButton>
                </Tooltip>
              </Stack>
            </Stack>

            <Box sx={{ 
              flex: 1, 
              overflow: 'auto',
              maxHeight: expandedFile === idx ? 'none' : '400px'
            }}>
              <SyntaxHighlighter
                language="javascript"
                style={docco}
                wrapLines
                wrapLongLines
                showLineNumbers
                lineNumberStyle={{
                  minWidth: '2.5em',
                  paddingRight: '1em',
                  color: theme.palette.text.disabled
                }}
                customStyle={{
                  margin: 0,
                  padding: '20px',
                  fontSize: '0.9rem',
                  backgroundColor: theme.palette.background.default,
                  minHeight: '200px' // Ensure some minimum height
                }}
                lineProps={{ 
                  style: { 
                    whiteSpace: 'pre-wrap', 
                    wordBreak: 'break-word',
                    fontFamily: 'monospace'
                  } 
                }}
              >
                {cleanCode(file.code)}
              </SyntaxHighlighter>
            </Box>
          </Paper>
        ))}
      </Box>

      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'flex-end',
        pt: 2,
        borderTop: `1px solid ${theme.palette.divider}`
      }}>
        <AnimatedButton
          onClick={createPr}
          variant="contained"
          size="large"
          loading={prStatus.loading}
          startIcon={<GitHubIcon />}
          sx={{ 
            minWidth: 220,
            py: 1.5,
            fontSize: '1rem'
          }}
        >
          Create Pull Request
        </AnimatedButton>
      </Box>
    </Paper>
  );
}